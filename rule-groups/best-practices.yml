rules:
    accessor-pairs: [2] # Enforces getter/setter pairs in objects
    array-callback-return: [2] # Enforces return statements in callbacks of array's methods
    block-scoped-var: [2] # treat var statements as if they were block scoped
    complexity: [2, 10] # specify the maximum cyclomatic complexity allowed in a program
    consistent-return: [0] # require return statements to either always or never specify values
    curly: [2] # specify curly brace conventions for all control statements
    default-case: [2] # require default case in switch statements
    dot-location: [2, 'property'] # enforces consistent newlines before or after dots
    dot-notation: [2] # encourages use of dot notation whenever possible
    eqeqeq: [2] # require the use of === and !==
    guard-for-in: [2] # make sure for-in loops have an if statement
    no-alert: [2] # disallow the use of alert, confirm, and prompt
    no-caller: [2] # disallow use of arguments.caller or arguments.callee
    no-case-declarations: [2] # disallow lexical declarations in case clauses
    no-div-regex: [2] # disallow division operators explicitly at beginning of regular expression
    no-else-return: [2] # disallow else after a return in an if
    no-empty-function: [2] # disallow use of empty functions
    no-empty-pattern: [2] # disallow use of empty destructuring patterns
    no-eq-null: [2] # disallow comparisons to null without a type-checking operator
    no-eval: [2] # disallow use of eval()
    no-extend-native: [2] # disallow adding to native types
    no-extra-bind: [2] # disallow unnecessary function binding
    no-extra-label: [2] # disallow unnecessary labels
    no-fallthrough: [2] # disallow fallthrough of case statements
    no-floating-decimal: [2] # disallow the use of leading or trailing decimal points in numeric literals
    no-implicit-coercion: [0] # disallow the type conversions with shorter notations
    no-implicit-globals: [2] # disallow var and named functions in global scope
    no-implied-eval: [2] # disallow use of eval()-like methods
    no-invalid-this: [2] # disallow this keywords outside of classes or class-like objects
    no-iterator: [2] # disallow usage of __iterator__ property
    no-labels: [2] # disallow use of labeled statements
    no-lone-blocks: [2] # disallow unnecessary nested blocks
    no-loop-func: [2] # disallow creation of functions within loops
    no-magic-numbers: [0] # disallow the use of magic numbers
    no-multi-spaces: [2] # disallow use of multiple spaces
    no-multi-str: [2] # disallow use of multiline strings
    no-native-reassign: [2] # disallow reassignments of native objects
    no-new: [2] # disallow use of the new operator when not part of an assignment or comparison
    no-new-func: [2] # disallow use of new operator for Function object
    no-new-wrappers: [2] # disallows creating new instances of String,Number, and Boolean
    no-octal: [2] # disallow use of octal literals
    no-octal-escape: [2] # disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    no-param-reassign: [0] # disallow reassignment of function parameters
    no-process-env: [0] # disallow use of process.env
    no-proto: [2] # disallow usage of __proto__ property
    no-redeclare: # disallow declaring the same variable more than once
        - 2
        - { builtinGlobals: true }
    no-return-assign: [2, 'always'] # disallow use of assignment in return statement
    no-script-url: [2] # disallow use of javascript urls.
    no-self-assign: [2] # disallow assignments where both sides are exactly the same
    no-self-compare: [2] # disallow comparisons where both sides are exactly the same
    no-sequences: [2] # disallow use of the comma operator
    no-throw-literal: [2] # restrict what can be thrown as an exception
    no-unmodified-loop-condition: [2] # disallow unmodified conditions of loops
    no-unused-expressions: [2] # disallow usage of expressions in statement position
    no-unused-labels: [2] # disallow unused labels
    no-useless-call: [2] # disallow unnecessary .call() and .apply()
    no-useless-concat: [2] # disallow unnecessary concatenation of literals or template literals
    no-void: [2] # disallow use of the void operator
    no-warning-comments: # disallow usage of configurable warning terms in comments (e.g. TODO or FIXME)
        - 2
        -
            location: 'anywhere'
            terms:
                - 'fixme'
                - 'todo'
                - 'no commit'
                - 'no-commit'
                - 'do not commit'
    no-with: [2] # disallow use of the with statement
    radix: [2] # require use of the second argument for parseInt()
    vars-on-top: [0] # require declaration of all vars at the top of their containing scope
    wrap-iife: [2, 'inside'] # require immediate function invocation to be wrapped in parentheses
    yoda: # require or disallow Yoda conditions
        - 2
        - never
        - { exceptRange: true }
