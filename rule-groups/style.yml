rules:
    array-bracket-spacing: [2, 'always'] # enforce spacing inside array brackets
    block-spacing: [2, 'always'] # disallow or enforce spaces inside of single line blocks
    brace-style: # enforce one true brace style
        - 2
        - 1tbs
        - { allowSingleLine: true }
    camelcase: # require camel case names
        - 2
        - { properties: always }
    comma-spacing: [2] # enforce spacing before and after comma
    comma-style: [2] # enforce one true comma style
    computed-property-spacing: [2] # require or disallow padding inside computed properties
    consistent-this: [2, 'self'] # enforce consistent naming when capturing the current execution context
    eol-last: [2] # enforce newline at the end of file, with no multiple empty lines
    func-names: [2] # require function expressions to have a name
    func-style: [0] # enforce use of function declarations or expressions
    id-blacklist: [0] # blacklist certain identifiers to prevent them being used
    id-length: [0] # this option enforces minimum and maximum identifier lengths (variable names, property names etc.)
    id-match: [0] # require identifiers to match the provided regular expression
    indent: # specify tab or space width for your code
        - 2
        - 4
        - { SwitchCase: 1 }
    jsx-quotes: [0] # specify whether double or single quotes should be used in JSX attributes
    key-spacing: [2] # enforce spacing between keys and values in object literal properties
    keyword-spacing: [2] # enforce spacing before and after keywords
    linebreak-style: [2] # disallow mixed 'LF' and 'CRLF' as linebreaks
    lines-around-comment: [0] # enforce empty lines around comments
    max-depth: [2] # specify the maximum depth that blocks can be nested
    max-len: # specify the maximum length of a line in your program
        - 2
        -
            code: 80
            comments: 120
            ignoreComments: true
            ignoreTrailingComments: true
            ignoreUrls: true
    max-nested-callbacks: [2, 4] # specify the maximum depth callbacks can be nested
    max-params: [2, 3] # limits the number of parameters that can be used in the function declaration
    max-statements: [2, 30] # specify the maximum number of statement allowed in a function
    new-cap: [2] # require a capital letter for constructors
    new-parens: [2] # disallow the omission of parentheses when invoking a constructor with no arguments
    newline-after-var: [0] # require or disallow an empty newline after variable declarations
    newline-per-chained-call: # enforce newline after each call when chaining the calls
        - 2
        - { ignoreChainWithDepth: 4 }
    no-array-constructor: [2] # disallow use of the Array constructor
    no-bitwise: [2] # disallow use of bitwise operators
    no-continue: [0] # disallow use of the continue statement
    no-inline-comments: [0] # disallow comments inline after code
    no-lonely-if: [2] # disallow if as the only statement in an else block
    no-mixed-spaces-and-tabs: [2] # disallow mixed spaces and tabs for indentation
    no-multiple-empty-lines: # disallow multiple empty lines
        - 2
        -
            max: 1
            maxEOF: 1
            maxBOF: 0
    no-negated-condition: [2] # disallow negated conditions
    no-nested-ternary: [2] # disallow nested ternary expressions
    no-new-object: [2] # disallow the use of the Object constructor
    no-plusplus: [0] # disallow use of unary operators, ++ and --
    no-restricted-syntax: [0] # disallow use of certain syntax in code
    no-spaced-func: [2] # disallow space between function identifier and application
    no-ternary: [0] # disallow the use of ternary operators
    no-trailing-spaces: [2] # disallow trailing whitespace at the end of lines
    no-underscore-dangle: [0] # disallow dangling underscores in identifiers
    no-unneeded-ternary: [2] # disallow the use of ternary operators when a simpler alternative exists
    no-whitespace-before-property: [2] # disallow whitespace before properties
    object-curly-spacing: [2, 'always'] # require or disallow padding inside curly braces
    one-var: [0] # require or disallow one variable declaration per function
    one-var-declaration-per-line: [0] # require or disallow an newline around variable declarations
    operator-assignment: [2, 'always'] # require assignment operator shorthand where possible or prohibit it entirely
    operator-linebreak: [2, 'after'] # enforce operators to be placed before or after line breaks
    padded-blocks: [2, 'never'] # enforce padding within blocks
    quote-props: [2, 'as-needed'] # require quotes around object literal property names
    quotes: [2, 'single', 'avoid-escape'] # specify whether backticks, double or single quotes should be used
    require-jsdoc: [0] # Require JSDoc comment
    semi: [2, 'always'] # require or disallow use of semicolons instead of ASI
    semi-spacing: [2] # enforce spacing before and after semicolons
    sort-imports: [0] # sort import declarations within module
    sort-vars: [0] # sort variables within the same declaration block
    space-before-blocks: [2, 'always'] # require or disallow a space before blocks
    space-before-function-paren: [2, 'always'] # require or disallow a space before function opening parenthesis
    space-in-parens: [2, 'never'] # require or disallow spaces inside parentheses
    space-infix-ops: [2] # require spaces around operators
    space-unary-ops: [2] # require or disallow spaces before/after unary operators
    spaced-comment: [2, 'always'] # require or disallow a space immediately following the // or /* in a comment
    wrap-regex: [2] # require regex literals to be wrapped in parentheses
